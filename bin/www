#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../build/server');
var debug = require('debug')('assignment:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
console.log(`Listening on Port: ${port}`);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);


/*
  Socket setup
 */
io.on('connection', function(socket) {
   //Globals
   var defaultRoom = 'general';
   var rooms = ["general", "angular", "socket.io"];

   //Emit the rooms array
   socket.emit('setup', {
      rooms: rooms
   });

   //Listen for new users
   socket.on('new user', function(data) {
      data.room = defaultRoom;
      //New user joins the default room
      socket.join(defaultRoom);
      //Tell all those in the room that a new user joined
      io.in(defaultRoom).emit('user joined', data);
   });

   socket.on('switch room', function(data) {
      //Handles joining and leaving rooms
      socket.leave(data.oldRoom);
      socket.join(data.newRoom);
      io.in(data.oldRoom).emit('user left', data);
      io.in(data.newRoom).emit('user joined', data);
   });

   //Listens for a new chat message
   socket.on('new message', function(data) {
      //Create message
      var newMsg = new Chat({
         username: data.username,
         content: data.message,
         room: data.room.toLowerCase(),
         created: new Date()
      });
      //Save it to database
      newMsg.save(function(err, msg){
         //Send message to those connected in the room
         io.in(msg.room).emit('message created', msg);
      });
   });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
